}
args_check(target, 'tid')
args_check(target, 'tid', 'floors')
args_check <- function(a, b, c) {
args <- c(b, c)
passed <- names(as.list(match.call()))
return(passed)
# if (any(!args %in% passed)) {
#   stop(sprintf('%s missing', paste(setdiff(args, passed), collapse = ', ')))
# }
}
args_check(target, 'tid', 'floors')
args_check <- function(a, b, c) {
args <- c(b, c)
passed <- names(as.list(match.call())[-1])
return(passed)
# if (any(!args %in% passed)) {
#   stop(sprintf('%s missing', paste(setdiff(args, passed), collapse = ', ')))
# }
}
args_check(target, 'tid', 'floors')
args_check <- function(a, b, c) {
args <- c(b, c)
passed <- names(as.list(match.call(c(b,c)))[-1])
return(passed)
# if (any(!args %in% passed)) {
#   stop(sprintf('%s missing', paste(setdiff(args, passed), collapse = ', ')))
# }
}
args_check(target, 'tid', 'floors')
args_check <- function(a, b, c) {
args <- c(b, c)
passed <- names(as.list(args)[-1])
return(passed)
# if (any(!args %in% passed)) {
#   stop(sprintf('%s missing', paste(setdiff(args, passed), collapse = ', ')))
# }
}
args_check(target, 'tid', 'floors')
args_check <- function(a, b, c) {
args <- c(b, c)
passed <- names(as.list(match.arg())[-1])
return(passed)
# if (any(!args %in% passed)) {
#   stop(sprintf('%s missing', paste(setdiff(args, passed), collapse = ', ')))
# }
}
args_check(target, 'tid', 'floors')
args_check <- function(a, b, c) {
args <- c(b, c)
passed <- names(as.list(match.args())[-1])
return(passed)
# if (any(!args %in% passed)) {
#   stop(sprintf('%s missing', paste(setdiff(args, passed), collapse = ', ')))
# }
}
args_check(target, 'tid', 'floors')
args_check <- function(a, b, c) {
args <- ls()
passed <- names(as.list(match.call())[-1])
return(passed)
# if (any(!args %in% passed)) {
#   stop(sprintf('%s missing', paste(setdiff(args, passed), collapse = ', ')))
# }
}
args_check(target, 'tid', 'floors')
args_check <- function(a, b, c) {
args <- as.list()
passed <- names(as.list(match.call())[-1])
return(passed)
# if (any(!args %in% passed)) {
#   stop(sprintf('%s missing', paste(setdiff(args, passed), collapse = ', ')))
# }
}
args_check(target, 'tid', 'floors')
args_check <- function(a, b, c) {
args <- ls()
passed <- names(as.list(match.call())[-1])
return(passed)
# if (any(!args %in% passed)) {
#   stop(sprintf('%s missing', paste(setdiff(args, passed), collapse = ', ')))
# }
}
args_check(target, 'tid', 'floors')
args_check <- function(a, b, c) {
args <- ls()
passed <- names(as.list(match.call())[-1])
return(passed)
if (any(!args %in% passed)) {
stop(sprintf('%s missing', paste(setdiff(args, passed), collapse = ', ')))
}
}
args_check(target, 'tid', 'floors')
args_check(target, 'floors')
args_check <- function(a, b, c) {
args <- ls()
passed <- names(as.list(match.call())[-1])
if (any(!args %in% passed)) {
stop(sprintf('%s missing', paste(setdiff(args, passed), collapse = ', ')))
}
}
args_check(target, 'floors')
args_check <- function(a, b, c) {
args <- ls()
passed <- names(as.list(match.call())[-1])
if (any(!args %in% passed)) {
stop(sprintf('%s is/are missing', paste(setdiff(args, passed), collapse = ', ')))
}
}
args_check(target, 'floors')
args_check(target, 'floors', 'tid')
args_check( 'floors', 'tid')
args_check(b='floors', c='tid')
pp_awi <- function(.target, source, sid, spop, point = FALSE) {
args <- ls()
passed <- names(as.list(match.call())[-1])
if (any(!args %in% passed)) {
stop(sprintf('%s is/are missing', paste(setdiff(args, passed), collapse = ', ')))
}
.target$pp_a <- as.vector(sf::st_area(.target))
if (point) {
.target <- sf::st_centroid(.target)
}
# perform intersection
int <- sf::st_intersection(.target, source)
# create wights field
int$pp_w <- 0
# find unique ids
code <- unique(int[, sid, drop = TRUE])
# calc weights
for (i in 1:length(code)) {
s <- as.numeric(sum(int$pp_a[int[, sid, drop = TRUE] == code[i]]))
if (s > 0) {
int$pp_w[int[, sid, drop = TRUE] == code[i]] <- int$pp_a[int[, sid, drop = TRUE] == code[i]]/s
}
}
# calc target pop
int$pp_est <- int[, spop, drop = TRUE] * int$pp_w
return(int)
}
pp_awi(target, source = source, sid = sid, spop = pop)
pp_awi <- function(.target, source, sid, spop, point = NULL) {
args <- ls()
passed <- names(as.list(match.call())[-1])
if (any(!args %in% passed)) {
stop(sprintf('%s is/are missing', paste(setdiff(args, passed), collapse = ', ')))
}
.target$pp_a <- as.vector(sf::st_area(.target))
if (point == TRUE) {
.target <- sf::st_centroid(.target)
}
# perform intersection
int <- sf::st_intersection(.target, source)
# create wights field
int$pp_w <- 0
# find unique ids
code <- unique(int[, sid, drop = TRUE])
# calc weights
for (i in 1:length(code)) {
s <- as.numeric(sum(int$pp_a[int[, sid, drop = TRUE] == code[i]]))
if (s > 0) {
int$pp_w[int[, sid, drop = TRUE] == code[i]] <- int$pp_a[int[, sid, drop = TRUE] == code[i]]/s
}
}
# calc target pop
int$pp_est <- int[, spop, drop = TRUE] * int$pp_w
return(int)
}
pp_awi(target, source = source, sid = sid, spop = pop)
library(roxygen2)
library(devtools)
devtools::document()
devtools::uses_testthat()
library(devtools)
devtools::uses_testthat()
devtools::uses_testthat()
library(testthat)
devtools::uses_testthat()
library(usethis)
use_testthat()
use_test(pp_estimate)
use_test('pp_estimate')
devtools::load_all()
pp_estimate(target, source, sid, pop)
pp_estimate(target, source, sid, pop)
devtools::load_all()
pp_estimate(target, source, sid, pop)
devtools::load_all()
pp_estimate(target, sid, pop)
pp_estimate(target, sid, pop, pop)
pp_estimate(target, sid, pop, pop, method)
pp_estimate(target, sid, pop, pop, awi)
pp_estimate(target, sid, pop, pop, awi, awi)
pp_estimate(target, sid, pop, pop, awi, awi, awi)
devtools::load_all()
pp_estimate(target, source, sid, pop, mathod = awi)
pp_estimate(target, source, sid, pop, method = awi)
devtools::load_all()
pp_estimate(target, source, sid, pop, method = awi)
devtools::load_all()
pp_estimate(target, source, sid, pop, method = awi)
devtools::load_all()
pp_estimate(target, source, sid, pop, method = awi)
devtools::load_all()
devtools::load_all()
pp_estimate(target, source, sid, pop, method = awi)
devtools::load_all()
pp_estimate(target, source, sid, pop, method = awi)
devtools::load_all()
pp_estimate(target, source, sid, pop, method = awi)
devtools::load_all()
pp_estimate(target, source, sid, pop, method = awi)
pp_estimate(target, source, sid, pop, method = awi)
devtools::load_all()
devtools::load_all()
pp_estimate(target, source, sid, pop, method = awi)
devtools::load_all()
pp_estimate( source, sid, pop, method = awi)
devtools::load_all()
pp_estimate( source, sid, pop, method = awi)
devtools::load_all()
pp_estimate( source, sid, pop, method = awi)
pp_estimate(targ, source, sid, pop, method = awi)
pp_estimate(target, source, sid, pop, method = awi)
pp_estimate( source, sid, pop, method = awi)
devtools::load_all()
pp_estimate( source, sid, pop, method = awi)
a <- function(x, y, z) {
arg <- as.list(match.call())[-1]
print(names(arg))
if (!'x' %in% names(arg)) {
stop('x is required')
}
}
a()
a <- function(x, y, z) {
arg <- as.list(match.call())[-1]
print(names(arg))
if ('x' %in% names(arg)) {
x <- args[['x']]
}
return(x)
}
a()
a(1)
a <- function(x, y, z) {
arg <- as.list(match.call())[-1]
print(names(arg))
if ('x' %in% names(arg)) {
x <- args[['x']]
} else {
stop('x is required')
}
return(x)
}
a(1)
devtools::load_all()
a <- function(x, y, z) {
arg <- as.list(match.call())[-1]
print(names(arg))
if ('x' %in% names(arg)) {
x <- data[[args['x']]]
} else {
stop('x is required')
}
return(x)
}
a(1)
a <- function(x, y, z) {
arg <- as.list(match.call())[-1]
print(names(arg))
if ('x' %in% names(arg)) {
x <- args['x']
} else {
stop('x is required')
}
return(x)
}
a(1)
a <- function(x, y, z) {
arg <- as.list(match.call())[-1]
print(arg['x'])
if ('x' %in% names(arg)) {
x <- args['x']
} else {
stop('x is required')
}
return(x)
}
a(1)
a <- function(x, y, z) {
arg <- as.list(match.call())[-1]
print(arg['x'])
if ('x' %in% names(arg)) {
x <- args["x"]
} else {
stop('x is required')
}
return(x)
}
a(1)
a <- function(x, y, z) {
arg <- as.list(match.call())[-1]
if ('x' %in% names(arg)) {
x <- args["x"]
} else {
stop('x is required')
}
return(x)
}
a(1)
a <- function(x, y, z) {
arg <- as.list(match.call())[-1]
if ('x' %in% names(arg)) {
x <- args[["x"]]
} else {
stop('x is required')
}
return(x)
}
a(1)
arg <- list()
x <- 1
x <- 1
y <- 2
z <- 3
arg <- list(x, y, z)
arg <- list(x = x, y = y, z = z)
arg <- list(x, y, z)
arg <- list(x = x, y = y, z = z)
arg['x']
x <- arg['x']
a <- function(x, y, z) {
arg <- as.list(match.call())[-1]
if ('x' %in% names(arg)) {
x <- arg[["x"]]
} else {
stop('x is required')
}
return(x)
}
a(1)
a(
)
a()
devtools::load_all()
pp_estimate(a)
pp_estimate(a, b)
devtools::load_all()
pp_estimate(target)
devtools::load_all()
pp_estimate(target)
pp_estimate(target)
devtools::load_all()
pp_estimate(target)
library(sf)
source <- read_sf(source)
target <- read_sf('D:/SynologyDrive/PhD/publications/2022/R-journal_(under_review)/review_2/target/subset_buildings_ijagr.shp')
source <- read_sf('D:/SynologyDrive/PhD/publications/2022/R-journal_(under_review)/review_2/source/subset_blocks.shp')
source <- mutate(source, sid = 1:nrow(source))
library(dplyr)
source <- mutate(source, sid = 1:nrow(source))
devtools::load_all()
pp_estimate(target, source, sid, pop, method = awi)
pp_estimate(target, source, sid, pop2011, method = awi)
devtools::load_all()
pp_estimate(target, source, sid, pop2011, method = awi)
class(target)
library(rgdal)
t <- readOGR('D:/SynologyDrive/PhD/publications/2022/R-journal_(under_review)/review_2/target/subset_buildings_ijagr.shp')
class(t)
a <- pp_estimate(target, source, sid, pop2011, method = awi)
a
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
names(source)
load_all()
devtools::load_all()
devtools::load_all()
pp_estimate()
pp_estimate(target = targer)
pp_estimate(target = targer, source = source, sid = sid, spop = pop, method = awi)
pp_estimate(target = target, source = source, sid = sid, spop = pops, method = awi)
devtools::load_all()
pp_estimate(target = target, source = source, sid = sid, spop = pops, method = awi)
devtools::load_all()
pp_estimate(target = target, source = source, sid = sid, spop = pops, method = awi)
devtools::load_all()
pp_estimate(target = target, source = source, sid = sid, spop = pops, volume = floors,
method = vwi)
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
pp_estimate(target = target, source = source, sid = sid, spop = pop, volume = floors,
method = vwiss)
pp_estimate(target = target, source = source, sid = sid, spop = pop, volume = floorssss,
method = vwi)
devtools::load_all()
pp_estimate(target = target, source = source, sid = sid, spop = pop, volume = floorssss,
method = vwi)
pp_estimate(target = target, source = source, sid = sid, spop = pop, volume = floors,
method = vwiss)
pp_estimate(target = target, source = source, sid = sids, spop = pop, volume = floors,
method = vwi)
load(system.file("extdata", "source", package = "populR", mustWork = TRUE))
load(system.file("extdata", "source", package = "populR", mustWork = TRUE))
load(system.file("extdata", "source.shp", package = "populR", mustWork = TRUE))
read_sf('D:/SynologyDrive/PhD/publications/2022/R-journal_(under_review)/populR_v0.1.5/populR/inst/extdata/source.shp')
src <- read_sf('D:/SynologyDrive/PhD/publications/2022/R-journal_(under_review)/populR_v0.1.5/populR/inst/extdata/source.shp')
> src <- read_sf('D:/SynologyDrive/PhD/publications/2022/R-journal_(under_review)/populR_v0.1.5/populR/inst/extdata/source.shp')
devtools::load_all()
devtools::load_all()
devtools::load_all()
library(populR)
remove.packages("populR", lib="~/R/win-library/4.1")
devtools::load_all()
devtools::load_all()
data("data/source.rda")
data("source")
class(source)
data("target")
class(target)
'sf' %in% class(source)
library(populR)
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
library(populR)
data("buildings")
plot(buildings['geometry'])
data("blocks")
blocks
load("D:/SynologyDrive/PhD/publications/2022/R-journal_(under_review)/populR_v0.1.5/populR/.RData")
devtools::document()
library(roxygen2)
library(populR)
devtools::document()
devtools::document()
library(sf)
target <- st_read("./subset_builds/subset_builds.shp")
setwd("D:/SynologyDrive/PhD/publications/2022/R-journal_(under_review)/populR_v0.1.5/populR/data-raw")
target <- st_read("./subset_builds/subset_builds.shp")
source <- st_read("./subset_blocks/subset_blocks.shp")
colnames(source)[colnames(source) == 'pop2011'] <- 'pop'
source$sid <- 1:nrow(source)
colnames(source)
source <- source[, c('sid', 'pop', 'geometry')]
blocks <- source
target$tid <- 1:nrow(target)
colnames(target)[colnames(target) == 'floor_nr'] <- 'floors'
target <- target[, c('tid', 'floors', 'geometry')]
colnames(target)
buildings <- target
usethis::use_data(buildings, blocks, overwrite = TRUE, compress = "xz")
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
library(sf)
target <- st_read("./subset_builds/subset_builds.shp")
source <- st_read("./subset_blocks/subset_blocks.shp")
colnames(source)[colnames(source) == 'pop2011'] <- 'pop'
source$sid <- 1:nrow(source)
colnames(source)
source <- source[, c('sid', 'pop', 'geometry')]
src <- source
target$tid <- 1:nrow(target)
colnames(target)[colnames(target) == 'floor_nr'] <- 'floors'
trg <- target[, c('tid', 'floors', 'geometry')]
colnames(target)
buildings <- target
library(sf)
target <- st_read("./subset_builds/subset_builds.shp")
source <- st_read("./subset_blocks/subset_blocks.shp")
colnames(source)[colnames(source) == 'pop2011'] <- 'pop'
source$sid <- 1:nrow(source)
colnames(source)
source <- source[, c('sid', 'pop', 'geometry')]
src <- source
target$tid <- 1:nrow(target)
colnames(target)[colnames(target) == 'floor_nr'] <- 'floors'
target <- target[, c('tid', 'floors', 'geometry')]
colnames(target)
trg <- target
usethis::use_data(trg, src, overwrite = TRUE, compress = "xz")
devtools::document()
devtools::load_all()
usethis::use_test("pp_rmse")
devtools::load_all()
pp_rmse(target = awi, source = src, sid = sid, spop = pop, tpop = pp_est,
title ='awi')
awi <- pp_estimate(trg, src, sid = sid, spop = pop, method = awi)
pp_rmse(target = awi, source = src, sid = sid, spop = pop, tpop = pp_est,
title ='awi')
length(pp_rmse(target = awi, source = src, sid = sid, spop = pop, tpop = pp_est,
title ='awi'))
length(pp_rmse(target = awi, source = src, sid = sid, spop = pop, tpop = pp_est,
title ='awi'))
expected <- length(pp_rmse(target = awi, source = src, sid = sid, spop = pop, tpop = pp_est,
title ='awi'))
expected
expected <- lengths(pp_rmse(target = awi, source = src, sid = sid, spop = pop, tpop = pp_est,
title ='awi'))
expected
usethis::use_test("pp_round")
devtools::load_all()
devtools::load_all()
