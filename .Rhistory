a <- function(x, y, z) {
arg <- as.list(match.call())[-1]
print(names(arg))
if (!'x' %in% names(arg)) {
stop('x is required')
}
}
a()
a <- function(x, y, z) {
arg <- as.list(match.call())[-1]
print(names(arg))
if ('x' %in% names(arg)) {
x <- args[['x']]
}
return(x)
}
a()
a(1)
a <- function(x, y, z) {
arg <- as.list(match.call())[-1]
print(names(arg))
if ('x' %in% names(arg)) {
x <- args[['x']]
} else {
stop('x is required')
}
return(x)
}
a(1)
devtools::load_all()
a <- function(x, y, z) {
arg <- as.list(match.call())[-1]
print(names(arg))
if ('x' %in% names(arg)) {
x <- data[[args['x']]]
} else {
stop('x is required')
}
return(x)
}
a(1)
a <- function(x, y, z) {
arg <- as.list(match.call())[-1]
print(names(arg))
if ('x' %in% names(arg)) {
x <- args['x']
} else {
stop('x is required')
}
return(x)
}
a(1)
a <- function(x, y, z) {
arg <- as.list(match.call())[-1]
print(arg['x'])
if ('x' %in% names(arg)) {
x <- args['x']
} else {
stop('x is required')
}
return(x)
}
a(1)
a <- function(x, y, z) {
arg <- as.list(match.call())[-1]
print(arg['x'])
if ('x' %in% names(arg)) {
x <- args["x"]
} else {
stop('x is required')
}
return(x)
}
a(1)
a <- function(x, y, z) {
arg <- as.list(match.call())[-1]
if ('x' %in% names(arg)) {
x <- args["x"]
} else {
stop('x is required')
}
return(x)
}
a(1)
a <- function(x, y, z) {
arg <- as.list(match.call())[-1]
if ('x' %in% names(arg)) {
x <- args[["x"]]
} else {
stop('x is required')
}
return(x)
}
a(1)
arg <- list()
x <- 1
x <- 1
y <- 2
z <- 3
arg <- list(x, y, z)
arg <- list(x = x, y = y, z = z)
arg <- list(x, y, z)
arg <- list(x = x, y = y, z = z)
arg['x']
x <- arg['x']
a <- function(x, y, z) {
arg <- as.list(match.call())[-1]
if ('x' %in% names(arg)) {
x <- arg[["x"]]
} else {
stop('x is required')
}
return(x)
}
a(1)
a(
)
a()
devtools::load_all()
pp_estimate(a)
pp_estimate(a, b)
devtools::load_all()
pp_estimate(target)
devtools::load_all()
pp_estimate(target)
pp_estimate(target)
devtools::load_all()
pp_estimate(target)
library(sf)
source <- read_sf(source)
target <- read_sf('D:/SynologyDrive/PhD/publications/2022/R-journal_(under_review)/review_2/target/subset_buildings_ijagr.shp')
source <- read_sf('D:/SynologyDrive/PhD/publications/2022/R-journal_(under_review)/review_2/source/subset_blocks.shp')
source <- mutate(source, sid = 1:nrow(source))
library(dplyr)
source <- mutate(source, sid = 1:nrow(source))
devtools::load_all()
pp_estimate(target, source, sid, pop, method = awi)
pp_estimate(target, source, sid, pop2011, method = awi)
devtools::load_all()
pp_estimate(target, source, sid, pop2011, method = awi)
class(target)
library(rgdal)
t <- readOGR('D:/SynologyDrive/PhD/publications/2022/R-journal_(under_review)/review_2/target/subset_buildings_ijagr.shp')
class(t)
a <- pp_estimate(target, source, sid, pop2011, method = awi)
a
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
names(source)
load_all()
devtools::load_all()
devtools::load_all()
pp_estimate()
pp_estimate(target = targer)
pp_estimate(target = targer, source = source, sid = sid, spop = pop, method = awi)
pp_estimate(target = target, source = source, sid = sid, spop = pops, method = awi)
devtools::load_all()
pp_estimate(target = target, source = source, sid = sid, spop = pops, method = awi)
devtools::load_all()
pp_estimate(target = target, source = source, sid = sid, spop = pops, method = awi)
devtools::load_all()
pp_estimate(target = target, source = source, sid = sid, spop = pops, volume = floors,
method = vwi)
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
pp_estimate(target = target, source = source, sid = sid, spop = pop, volume = floors,
method = vwiss)
pp_estimate(target = target, source = source, sid = sid, spop = pop, volume = floorssss,
method = vwi)
devtools::load_all()
pp_estimate(target = target, source = source, sid = sid, spop = pop, volume = floorssss,
method = vwi)
pp_estimate(target = target, source = source, sid = sid, spop = pop, volume = floors,
method = vwiss)
pp_estimate(target = target, source = source, sid = sids, spop = pop, volume = floors,
method = vwi)
load(system.file("extdata", "source", package = "populR", mustWork = TRUE))
load(system.file("extdata", "source", package = "populR", mustWork = TRUE))
load(system.file("extdata", "source.shp", package = "populR", mustWork = TRUE))
read_sf('D:/SynologyDrive/PhD/publications/2022/R-journal_(under_review)/populR_v0.1.5/populR/inst/extdata/source.shp')
src <- read_sf('D:/SynologyDrive/PhD/publications/2022/R-journal_(under_review)/populR_v0.1.5/populR/inst/extdata/source.shp')
> src <- read_sf('D:/SynologyDrive/PhD/publications/2022/R-journal_(under_review)/populR_v0.1.5/populR/inst/extdata/source.shp')
devtools::load_all()
devtools::load_all()
devtools::load_all()
library(populR)
remove.packages("populR", lib="~/R/win-library/4.1")
devtools::load_all()
devtools::load_all()
data("data/source.rda")
data("source")
class(source)
data("target")
class(target)
'sf' %in% class(source)
library(populR)
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
library(populR)
data("buildings")
plot(buildings['geometry'])
data("blocks")
blocks
load("D:/SynologyDrive/PhD/publications/2022/R-journal_(under_review)/populR_v0.1.5/populR/.RData")
devtools::document()
library(roxygen2)
library(populR)
devtools::document()
devtools::document()
library(sf)
target <- st_read("./subset_builds/subset_builds.shp")
setwd("D:/SynologyDrive/PhD/publications/2022/R-journal_(under_review)/populR_v0.1.5/populR/data-raw")
target <- st_read("./subset_builds/subset_builds.shp")
source <- st_read("./subset_blocks/subset_blocks.shp")
colnames(source)[colnames(source) == 'pop2011'] <- 'pop'
source$sid <- 1:nrow(source)
colnames(source)
source <- source[, c('sid', 'pop', 'geometry')]
blocks <- source
target$tid <- 1:nrow(target)
colnames(target)[colnames(target) == 'floor_nr'] <- 'floors'
target <- target[, c('tid', 'floors', 'geometry')]
colnames(target)
buildings <- target
usethis::use_data(buildings, blocks, overwrite = TRUE, compress = "xz")
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
library(sf)
target <- st_read("./subset_builds/subset_builds.shp")
source <- st_read("./subset_blocks/subset_blocks.shp")
colnames(source)[colnames(source) == 'pop2011'] <- 'pop'
source$sid <- 1:nrow(source)
colnames(source)
source <- source[, c('sid', 'pop', 'geometry')]
src <- source
target$tid <- 1:nrow(target)
colnames(target)[colnames(target) == 'floor_nr'] <- 'floors'
trg <- target[, c('tid', 'floors', 'geometry')]
colnames(target)
buildings <- target
library(sf)
target <- st_read("./subset_builds/subset_builds.shp")
source <- st_read("./subset_blocks/subset_blocks.shp")
colnames(source)[colnames(source) == 'pop2011'] <- 'pop'
source$sid <- 1:nrow(source)
colnames(source)
source <- source[, c('sid', 'pop', 'geometry')]
src <- source
target$tid <- 1:nrow(target)
colnames(target)[colnames(target) == 'floor_nr'] <- 'floors'
target <- target[, c('tid', 'floors', 'geometry')]
colnames(target)
trg <- target
usethis::use_data(trg, src, overwrite = TRUE, compress = "xz")
devtools::document()
devtools::load_all()
usethis::use_test("pp_rmse")
devtools::load_all()
pp_rmse(target = awi, source = src, sid = sid, spop = pop, tpop = pp_est,
title ='awi')
awi <- pp_estimate(trg, src, sid = sid, spop = pop, method = awi)
pp_rmse(target = awi, source = src, sid = sid, spop = pop, tpop = pp_est,
title ='awi')
length(pp_rmse(target = awi, source = src, sid = sid, spop = pop, tpop = pp_est,
title ='awi'))
length(pp_rmse(target = awi, source = src, sid = sid, spop = pop, tpop = pp_est,
title ='awi'))
expected <- length(pp_rmse(target = awi, source = src, sid = sid, spop = pop, tpop = pp_est,
title ='awi'))
expected
expected <- lengths(pp_rmse(target = awi, source = src, sid = sid, spop = pop, tpop = pp_est,
title ='awi'))
expected
usethis::use_test("pp_round")
devtools::load_all()
devtools::load_all()
library(devtools)
library(roxygen2)
library(testthat)
library(usethis)
usethis::use_vignette("areal-interpolation-comparison")
install.packages("populR")
data("src")
library(populR)
library(populR)
data("src", library = "populR")
data("trg")
source <- src
target <- trg
library(populR)
data("src", library = "populR")
data("trg")
source <- src
target <- trg
plot(source['geometry'])
library(populR)
data("src")
data("trg")
source <- src
target <- trg
library(populR)
data("src")
data("trg")
source <- src
target <- trg
target
setwd("D:/SynologyDrive/PhD/populR_git/populR/data-raw")
library(sf)
target <- st_read("./subset_builds/subset_builds.shp")
source <- st_read("./subset_blocks/subset_blocks.shp")
source("D:/SynologyDrive/PhD/populR_git/populR/data-raw/call_data.R", echo=TRUE)
target
target <- st_read("./subset_builds/subset_builds.shp")
target
target <- st_read("./target/subset_builds.shp")
source <- st_read("./source/subset_blocks.shp")
target <- st_read("./target/subset_buildings_ijagr.shp")
target
source <- st_read("./source/subset_blocks.shp")
source
colnames(source)[colnames(source) == 'pop2011'] <- 'pop'
source$sid <- 1:nrow(source)
colnames(source)
source <- source[, c('sid', 'pop', 'geometry')]
src <- source
target$tid <- 1:nrow(target)
colnames(target)
target <- target[, c('tid', 'fl_0_use', 'fl_1_use', 'fl_2_use', 'fl_3_use',
'fl_4_use', 'fl_5_use', 'fl_6_use', 'fl_7_use', 'floors', 'geometry')]
colnames(target)
trg <- target
usethis::use_data(trg, src, overwrite = TRUE, compress = "xz")
devtools::load_all()
data('trg')
trg
data('src')
src
# attach libraries
library(populR)
library(areal)
library(sf)
# read built-in data
data('src')
data('trg')
source <- src
target <- trg
# populR
# awi approach
awi <- pp_estimate(target = target, source = source, spop = pop, sid = sid,
method = awi)
# vwi approach
vwi <- pp_estimate(target = target, source = source, spop = pop, sid = sid,
volume = floors, method = vwi)
# areal
# sum weights
aws <- aw_interpolate(target, tid = tid, source = source, sid = 'sid',
weight = 'sum', output = 'sf', extensive = 'pop')
# total weights
awt <- aw_interpolate(target, tid = tid, source = source, sid = 'sid',
weight = 'total', output = 'sf', extensive = 'pop')
# sf - total weights
sf <- st_interpolate_aw(source['pop'], target, extensive = TRUE)
source
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# load libs and data
library(populR)
data('src')
data('trg')
source <- src
target <- trg
source
# generate reference population
target$floors <- target$fl_0_use + target$fl_1_use + target$fl_2_use + target$fl_3_use +
target$fl_4_use + target$fl_5_use + target$fl_6_use + target$fl_7_use
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# load libs and data
library(populR)
data('src')
data('trg')
source <- src
target <- trg
source
# generate reference population
target$floors <- target$fl_0_use + target$fl_1_use + target$fl_2_use + target$fl_3_use +
target$fl_4_use + target$fl_5_use + target$fl_6_use + target$fl_7_use
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# load libs and data
library(populR)
data('src')
data('trg')
source <- src
target <- trg
source
# generate reference population
# target$floors <- target$fl_0_use + target$fl_1_use + target$fl_2_use + target$fl_3_use +
#   target$fl_4_use + target$fl_5_use + target$fl_6_use + target$fl_7_use
#rf <- pp_estimate(target = target, source = source, sid = sid, spop = pop,
#                  volume = floors, method = vwi)
source
source
# attach libraries
library(populR)
library(areal)
library(sf)
# read built-in data
data('src')
data('trg')
source <- src
target <- trg
# populR
# awi approach
awi <- pp_estimate(target = target, source = source, spop = pop, sid = sid,
method = awi)
# vwi approach
vwi <- pp_estimate(target = target, source = source, spop = pop, sid = sid,
volume = floors, method = vwi)
# areal
# sum weights
aws <- aw_interpolate(target, tid = tid, source = source, sid = 'sid',
weight = 'sum', output = 'sf', extensive = 'pop')
# total weights
awt <- aw_interpolate(target, tid = tid, source = source, sid = 'sid',
weight = 'total', output = 'sf', extensive = 'pop')
# sf - total weights
sf <- st_interpolate_aw(source['pop'], target, extensive = TRUE)
data('src')
src
data('trg')
trg
remove.packages("populR", lib="~/R/win-library/4.1")
library(populR)
plot(awi$pp_est)
plot(awi['pp_est'])
# attach libraries
library(populR)
library(areal)
library(sf)
# load data
data('src')
data('trg')
source <- src
target <- trg
# populR
# awi approach
awi <- pp_estimate(target = target, source = source, spop = pop, sid = sid,
method = awi)
# vwi approach
vwi <- pp_estimate(target = target, source = source, spop = pop, sid = sid,
volume = floors, method = vwi)
# areal
# sum weights
aws <- aw_interpolate(target, tid = tid, source = source, sid = 'sid',
weight = 'sum', output = 'sf', extensive = 'pop')
# total weights
awt <- aw_interpolate(target, tid = tid, source = source, sid = 'sid',
weight = 'total', output = 'sf', extensive = 'pop')
# sf - total weights
sf <- st_interpolate_aw(source['pop'], target, extensive = TRUE)
awi <- awi[order('pp_est'),]
awi_values <- awi[1:10, 'pp_est']
awi_values
vwi_values <- vwi[1:10, 'pp_est']
vwi_values
awt_values <- awt[1:10, 'pop']
awt_values
aws_values <- awt[1:10, 'pop']
aws_values
devtools::load_all(".")
# attach libraries
library(populR)
library(areal)
library(sf)
# load data
data('src')
data('trg')
source <- src
target <- trg
# populR - awi
awi <- pp_estimate(target = target, source = source, spop = pop, sid = sid,
method = awi)
# populR - vwi
vwi <- pp_estimate(target = target, source = source, spop = pop, sid = sid,
volume = floors, method = vwi)
# areal - sum weights
aws <- aw_interpolate(target, tid = tid, source = source, sid = 'sid',
weight = 'sum', output = 'sf', extensive = 'pop')
# areal - total weights
awt <- aw_interpolate(target, tid = tid, source = source, sid = 'sid',
weight = 'total', output = 'sf', extensive = 'pop')
# sf - total weights
sf <- st_interpolate_aw(source['pop'], target, extensive = TRUE)
df <- cbind(df, rf)
data("trg")
trg
